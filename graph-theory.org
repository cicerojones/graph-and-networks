;;; unrelated exploration of both Land of Lisp code for drawing
;;; graphs and ANSI Common Lisp code for doing breadth-first-search of
;;; graphs


A network structure is being represented here as /assoc-lists/. 

Recall what an an assoc-list is. 

#+BEGIN_QUOTE
It is also natural to use conses to represent mappings. A list of
conses is called an /assoc-list/ or /alist/.
#+END_QUOTE

Graham goes on to say that alists are "convenient in the first stages
of a program."

In this case, we show a network as: src_<lisp>{(node . neighbors)}


#+BEGIN_SRC lisp
;; a given minimal network
(setf min '((a b c) (b c) (c d)))
#+END_SRC

#+BEGIN_SRC lisp 
(shortest-path 'a 'd min)
#+END_SRC 

#+BEGIN_SRC lisp 
(defparameter *wizard-nodes* '((living-room (you are in the living-room.
                                             ))
                               (garden (you are you.))
                               (attic (you are in the))))
#+END_SRC 

#+BEGIN_SRC lisp 
(defparameter *wizard-edges* '((living-room (garden west door)  
                                (attic upstairs ladder))
                               (garden (living-room east door))
                               (attic (living-room downstairs ladder))))
#+END_SRC 

#+BEGIN_SRC lisp 
(defun dot-name (exp)
  (substitute-if #\_ (complement #'alphanumericp) (prin1-to-string exp)))
#+END_SRC 

#+BEGIN_SRC lisp 
(defparameter *max-label-length* 30)
#+END_SRC 


;; PG's code from book examples
#+BEGIN_SRC lisp 
(defun shortest-path (start end net)
  (bfs end (list (list start)) net))
#+END_SRC 

#+BEGIN_SRC lisp 
(defun bfs (end queue net)
  (if (null queue)
      nil
      (let ((path (car queue)))
	(let ((node (car path)))
	  (if (eql node end)
	      (reverse path)
	      (bfs end
		   (append (cdr queue)
			   (new-paths path node net))
		   net))))))
#+END_SRC 

#+BEGIN_SRC lisp 
(defun new-paths (path node net)
  (mapcar #'(lambda (n)
	      (cons n path))
	  (cdr (assoc node net))))
#+END_SRC 

;; Barski's code
#+BEGIN_SRC lisp 
(defun dot-label (exp)
  (if exp
      (let ((s (write-to-string exp :pretty nil)))
        (if (> (length s) *max-label-length*)
            (concatenate 'string (subseq s 0 (- *max-label-length* 3)) "...")
            s))
      ""))
#+END_SRC 

#+BEGIN_SRC lisp 
(defun nodes->dot (nodes)
  (mapc (lambda (node)
          (fresh-line)
          (princ (dot-name (car node)))
          (princ "[label=\"")
          (princ (dot-label node))
          (princ "\"];"))
        nodes))
#+END_SRC 

#+BEGIN_SRC lisp 
(defun edges->dot (edges)
  (mapc (lambda (node)
          (mapc (lambda (edge)
                  (fresh-line)
                  (princ (dot-name (car node)))
                  (princ "->")
                  (princ (dot-name (car edge)))
                  (princ "[label=\"")
                  (princ (dot-label (cdr edge)))
                  (princ "\"];"))
                (cdr node)))
        edges))
#+END_SRC 

#+BEGIN_SRC lisp 
(defun dgraph->dot (nodes edges)
  (princ "digraph{")
  (nodes->dot nodes)
  (edges->dot edges)
  (princ "}"))
#+END_SRC 

;; how to create a file for use with graphviz
#+BEGIN_SRC lisp 
(defun dot->png (fname thunk)
  (with-open-file (*standard-output*
		   (concatenate 'string fname ".dot") :direction :output :if-exists :supersede)
    (funcall thunk))
  (ext:shell (concatenate 'string "dot -Tpng -O " fname ".dot")))
#+END_SRC 

#+BEGIN_SRC lisp 
(defun dgraph->png (fname nodes edges)
  (dot->png fname
            (lambda ()
              (dgraph->dot nodes edges))))
#+END_SRC 

;; my code for building up the needed node data for sending off
#+BEGIN_SRC lisp 
(defun build-nodes (node-list)
  (let* ((head (car node-list))
	 (tail (cdr node-list)))
    (labels ((rec (lst)
	       (cond ((null lst) ())
		     (t (cons (list head (car lst))
			      (rec (cdr lst)))))))
      (rec tail))))
#+END_SRC 

#+BEGIN_SRC lisp 
(defun convert (cns)
  (princ (car cns))
  (princ "->")
  (princ (cadr cns))
  (princ ";"))
#+END_SRC 

#+BEGIN_SRC lisp 
(defun my-graph->dot (node-lst)
  (princ "digraph{")
  (mapcar #'convert (mapcan #'build-nodes node-lst))
  (princ "}"))
#+END_SRC 

;; the master function for creating png files of graphs
#+BEGIN_SRC lisp 
(defun my-graph->png (fname node-lst)
  "produces graphs given a filename and list of nodes"
  (dot->png fname
	    (lambda ()
	      (my-graph->dot node-lst))))
#+END_SRC 

;(defun run ()
;  (ugraph->png "wizard" *nodes* *edges*))

#+BEGIN_SRC lisp 
(defun uedges->dot (edges)
  (maplist (lambda (lst)
             (mapc (lambda (edge)
                     (unless (assoc (car edge) (cdr lst))
                       (fresh-line)
                       (princ (dot-name (caar lst)))
                       (princ "--")
                       (princ (dot-name (car edge)))
                       (princ "[label=\"")
                       (princ (dot-label (cdr edge)))
                       (princ "\"];")))
                   (cdar lst)))
           edges))
#+END_SRC 

#+BEGIN_SRC lisp 
(defun ugraph->dot (nodes edges)
  (princ "graph{")
  (nodes->dot nodes)
  (uedges->dot edges)
  (princ "}"))
#+END_SRC   


#+BEGIN_SRC lisp 
(defun ugraph->png (fname nodes edges)
  (dot->png fname
            (lambda ()
              (ugraph->dot nodes edges))))
#+END_SRC 

;; simple with-open-file examples

#+BEGIN_SRC lisp 
(defun write-junk (fname str-message)
  "creates .txt files with a given fname, containing messages passed in as strings"
	   (with-open-file (*standard-output*
			    (concatenate 'string fname ".txt")
			    :direction :output
			    :if-exists :supersede)
	     (princ str-message)))
#+END_SRC 

#+BEGIN_SRC lisp
(defun write-junk-digraphs (fname)
  "creates a single, simple static messages for parsing by graph to png functions"
  (with-open-file (*standard-output*
		   (concatenate 'string fname ".dot") 
		   :direction :output 
		   :if-exists :supersede)
    (princ "digraph {a->b; a->c;}")))
#+END_SRC 

;; (write-junk-digraphs "testes5")

'((a b c) (b c) (c d))

(let ((ex '(a b)))
  (labels 
      ((convert (cns)
	 (princ (car cns))
	 (princ "->")
	 (princ (cadr cns))
	 (princ ";")))
    (convert ex)))
